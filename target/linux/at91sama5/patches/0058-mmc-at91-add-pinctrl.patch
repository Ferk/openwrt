From 32036b9e9ba25fd760f31b5ec2e80b33b8bb88dd Mon Sep 17 00:00:00 2001
From: Ludovic Desroches <ludovic.desroches@atmel.com>
Date: Tue, 16 Oct 2012 17:08:12 +0200
Subject: [PATCH 058/319] mmc: at91: add pinctrl

Signed-off-by: Ludovic Desroches <ludovic.desroches@atmel.com>
---
 drivers/mmc/host/atmel-mci.c |   36 ++++++++++++++++++++++++++++++------
 1 file changed, 30 insertions(+), 6 deletions(-)

diff --git a/drivers/mmc/host/atmel-mci.c b/drivers/mmc/host/atmel-mci.c
index a3f6482..bdb8e9b 100644
--- a/drivers/mmc/host/atmel-mci.c
+++ b/drivers/mmc/host/atmel-mci.c
@@ -28,6 +28,7 @@
 #include <linux/slab.h>
 #include <linux/stat.h>
 #include <linux/types.h>
+#include <linux/pinctrl/consumer.h>
 
 #include <linux/mmc/host.h>
 #include <linux/mmc/sdio.h>
@@ -2225,12 +2226,20 @@ static int __init atmci_init_slot(struct atmel_mci *host,
 	/* Assume card is present initially */
 	set_bit(ATMCI_CARD_PRESENT, &slot->flags);
 	if (gpio_is_valid(slot->detect_pin)) {
-		if (gpio_request(slot->detect_pin, "mmc_detect")) {
-			dev_dbg(&mmc->class_dev, "no detect pin available\n");
+		if (devm_gpio_request(&mmc->class_dev, slot->detect_pin,
+								"mmc_detect")) {
+			dev_dbg(&mmc->class_dev, "can't request detect pin\n");
 			slot->detect_pin = -EBUSY;
-		} else if (gpio_get_value(slot->detect_pin) ^
-				slot->detect_is_active_high) {
-			clear_bit(ATMCI_CARD_PRESENT, &slot->flags);
+		} else {
+			if (gpio_direction_input(slot->detect_pin)) {
+				dev_err(&mmc->class_dev,
+					"can't set detect pin direction\n");
+				devm_gpio_free(&mmc->class_dev, slot->detect_pin);
+				slot->detect_pin = -EBUSY;
+			} else if (gpio_get_value(slot->detect_pin) ^
+					slot->detect_is_active_high) {
+				clear_bit(ATMCI_CARD_PRESENT, &slot->flags);
+			}
 		}
 	}
 
@@ -2238,9 +2247,17 @@ static int __init atmci_init_slot(struct atmel_mci *host,
 		mmc->caps |= MMC_CAP_NEEDS_POLL;
 
 	if (gpio_is_valid(slot->wp_pin)) {
-		if (gpio_request(slot->wp_pin, "mmc_wp")) {
+		if (devm_gpio_request(&mmc->class_dev, slot->wp_pin,
+								"mmc_wp")) {
 			dev_dbg(&mmc->class_dev, "no WP pin available\n");
 			slot->wp_pin = -EBUSY;
+		} else {
+			if (gpio_direction_output(slot->wp_pin, 0)) {
+				dev_err(&mmc->class_dev,
+					"can't set WP pin direction\n");
+				devm_gpio_free(&mmc->class_dev, slot->wp_pin);
+				slot->wp_pin = -EBUSY;
+			}
 		}
 	}
 
@@ -2407,6 +2424,7 @@ static int __init atmci_probe(struct platform_device *pdev)
 	unsigned int			nr_slots;
 	int				irq;
 	int				ret;
+	struct pinctrl			*pinctrl;
 
 	regs = platform_get_resource(pdev, IORESOURCE_MEM, 0);
 	if (!regs)
@@ -2420,6 +2438,12 @@ static int __init atmci_probe(struct platform_device *pdev)
 		}
 	}
 
+	pinctrl = devm_pinctrl_get_select_default(&pdev->dev);
+	if (IS_ERR(pinctrl)) {
+		dev_err(&pdev->dev, "Failed to request pinctrl\n");
+		return PTR_ERR(pinctrl);
+	}
+
 	irq = platform_get_irq(pdev, 0);
 	if (irq < 0)
 		return irq;
-- 
1.7.10.4

